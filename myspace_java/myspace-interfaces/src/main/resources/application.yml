server:
  port: 8081

spring:
  datasource:
    type: com.alibaba.druid.pool.DruidDataSource
    driverClassName: com.mysql.jdbc.Driver
    druid:
      # 主库数据源
      master:
        url: jdbc:mysql://slave4:3306/myspace?useUnicode=true&characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=false&serverTimezone=GMT%2B8
        username: root
        password: 1234
      # 从库数据源
      slave:
        # 从数据源开关/默认关闭
        enabled: false
        url:
        username:
        password:
      # 初始连接数
      initialSize: 5
      # 最小连接池数量
      minIdle: 10
      # 最大连接池数量
      maxActive: 20
      # 配置获取连接等待超时的时间
      maxWait: 60000
      # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
      timeBetweenEvictionRunsMillis: 60000
      # 配置一个连接在池中最小生存的时间，单位是毫秒
      minEvictableIdleTimeMillis: 300000
      # 配置一个连接在池中最大生存的时间，单位是毫秒
      maxEvictableIdleTimeMillis: 900000
      # 配置检测连接是否有效
      validationQuery: SELECT 1 FROM DUAL
      testWhileIdle: true
      testOnBorrow: false
      testOnReturn: false
      webStatFilter:
        enabled: true
      statViewServlet:
        enabled: true
        # 设置白名单，不填则允许所有访问
        allow:
        url-pattern: /druid/*
        # 控制台管理用户名和密码
        login-username:
        login-password:
      filter:
        stat:
          enabled: true
          # 慢SQL记录
          log-slow-sql: true
          slow-sql-millis: 1000
          merge-sql: true
        wall:
          config:
            multi-statement-allow: true
# Redis 云服务器搭建后配置并重启 【否则会 Unable to connect to 39.96.*.*:6379】
# 防火墙放行：firewall-cmd --zone=public --add-port=6379/tcp --permanent
# 防火墙重启：firewall-cmd --reload
# redis.conf 注释掉 bind 127.0.0.1
# redis.conf protected-mode yes 改为 protected-mode no
  redis:
    database: 0
    host: slave4     # Redis服务器地址，修改为你的地址
    port: 6379          # Redis服务器连接端口
    password: 1234          # Redis服务器连接密码（默认为空）
    timeout: 3000       # Redis服务器链接超时配置
# 本地安装 kafka 按照下面的方式启动即可
# Spring kafka 配置 cd itstack/soft/kafka_2.13-2.8.0
# 启动zk：bin/zkServer.sh -daemon conf/zoo.cfg
# 启动kafka：bin/kafka-server-start.sh -daemon config/server.properties
  kafka:
    bootstrap-servers: slave4:9092
    producer:
      # 发生错误后，消息重发的次数。
      retries: 1
      #当有多个消息需要被发送到同一个分区时，生产者会把它们放在同一个批次里。该参数指定了一个批次可以使用的内存大小，按照字节数计算。
      batch-size: 16384
      # 设置生产者内存缓冲区的大小。
      buffer-memory: 33554432
      # 键的序列化方式
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      # 值的序列化方式
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
      # acks=0 ： 生产者在成功写入消息之前不会等待任何来自服务器的响应。
      # acks=1 ： 只要集群的首领节点收到消息，生产者就会收到一个来自服务器成功响应。
      # acks=all ：只有当所有参与复制的节点全部收到消息时，生产者才会收到一个来自服务器的成功响应。
      acks: 1
    consumer:
      # 自动提交的时间间隔 在spring boot 2.X 版本中这里采用的是值的类型为Duration 需要符合特定的格式，如1S,1M,2H,5D
      auto-commit-interval: 1S
      # 该属性指定了消费者在读取一个没有偏移量的分区或者偏移量无效的情况下该作何处理：
      # latest（默认值）在偏移量无效的情况下，消费者将从最新的记录开始读取数据（在消费者启动之后生成的记录）
      # earliest ：在偏移量无效的情况下，消费者将从起始位置读取分区的记录
      auto-offset-reset: earliest
      # 是否自动提交偏移量，默认值是true,为了避免出现重复数据和数据丢失，可以把它设置为false,然后手动提交偏移量
      enable-auto-commit: false
      # 键的反序列化方式
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      # 值的反序列化方式
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
    listener:
      # 在侦听器容器中运行的线程数。
      concurrency: 5
      #listner负责ack，每调用一次，就立即commit
      ack-mode: manual_immediate
      missing-topics-fatal: false

# Mybatis
mybatis:
  # 搜索指定包别名
  type-aliases-package: cn.myspace.infrastructure,cn.myspace.domain,
  # 配置mapper的扫描，找到所有的mapper.xml映射文件
  mapper-locations: classpath:/mybatis/mapper/*.xml
  # 加载全局的配置文件
  config-location: classpath:/mybatis/config/mybatis-config.xml

# nacos 配置中心
nacos:
  discovery:
    server-addr: slave4:8848

# Dubbo 广播方式配置，如果调用不稳定可以修改为直连模式：https://codechina.csdn.net/KnowledgePlanet/Lottery/-/issues/1
dubbo:
  application:
    name: myspace
    version: 1.0.0
#    parameters:
#      unicast: false
  registry:
#    address: N/A
#    address: #multicast://224.5.6.7:1234
#    address: zookeeper://127.0.0.1:2181
    address: nacos://slave4:8848
  protocol:
    name: dubbo
    port: -1
  scan:
    base-packages: cn.myspace.rpc.*
#  metadata-report:
#    address: nacos://slave4:8848
#    username: test
#    password: 123456
#    # 配置 namespace，有namespace需要指定namespace
#    parameters:
#      namespace: 88b66463-1685-40b3-ba9c-7b25e526dcfb
#    # 配置 隔离组，有配置 group 的需要指定 group
#    group: ucp

# token配置
#token:
#  # 令牌自定义标识
#  header: Authorization
#  # 令牌密钥
#  secret: Myspace
#  # 令牌有效期（默认30分钟）
#  expireTime: 30

# xxl-job
# 官网：https://github.com/xuxueli/xxl-job/
# 地址：http://localhost:7397/xxl-job-admin 【需要先启动 xxl-job】
# http://39.96.73.167:7397/xxl-job-admin
# 账号：admin
# 密码：123456
#xxl:
#  job:
#    admin:
#      ### 调度中心部署跟地址 [选填]：如调度中心集群部署存在多个地址则用逗号分隔。执行器将会使用该地址进行"执行器心跳注册"和"任务结果回调"；为空则关闭自动注册；
#      addresses: http://127.0.0.1:7397/xxl-job-admin
#    executor:
#      ### 执行器AppName [选填]：执行器心跳注册分组依据；为空则关闭自动注册
#      appname: lottery-job
#      ### 执行器注册 [选填]：优先使用该配置作为注册地址，为空时使用内嵌服务 ”IP:PORT“ 作为注册地址。从而更灵活的支持容器类型执行器动态IP和动态映射端口问题。
#      address:
#      ### 执行器IP [选填]：默认为空表示自动获取IP，多网卡时可手动设置指定IP，该IP不会绑定Host仅作为通讯实用；地址信息用于 "执行器注册" 和 "调度中心请求并触发任务"；
#      ip:
#      ### 执行器端口号 [选填]：小于等于0则自动获取；默认端口为9999，单机部署多个执行器时，注意要配置不同执行器端口；
#      port: 9998
#      logpath: /Users/fuzhengwei/itstack/data/applogs/xxl-job/jobhandler
#      logretentiondays: 50
#    accessToken: xdsl3ewi3al1oehxmo68pqxer

# 配置文件明文密码加密
#jasypt:
#  encryptor:
#    password: Myspace # 自定义加密密钥
#    property:
#      prefix: Myspace( # 自定义加密前缀
#      suffix: ) # 自定义加密后缀
#    bean: codeSheepEncryptorBean # 自定义加密器